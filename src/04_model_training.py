# -*- coding: utf-8 -*-
"""04_model_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d7ARK7_nZKagUN3EZl8kENTwsI_2pMTq

## Load the Processed Dataset
"""

import pandas as pd
import os
from sklearn.model_selection import train_test_split

# Define directories

DATA_DIR = "data/"  # Correct relative path
df = pd.read_csv(os.path.join(DATA_DIR, "train_processed.csv"))


print("Processed dataset loaded!")
print(df.info())

## Split Data into Train & Test Sets

# Define target variable
TARGET = "units_sold"  # Adjust if needed

# Separate features (X) and target (y)
X = df.drop(columns=[TARGET])
y = df[TARGET]

# Split into train (80%) and test (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Data split into train & test sets!")
print(f"Train shape: {X_train.shape}, Test shape: {X_test.shape}")

"""## Train Multiple Model"""

from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Initialize models
models = {
    "RandomForest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, random_state=42),
    "GradientBoosting": GradientBoostingRegressor(n_estimators=100, random_state=42),
}

# Train models and evaluate performance
results = {}
for name, model in models.items():
    print(f" Training {name}...")
    model.fit(X_train, y_train)

    # Predictions
    y_pred = model.predict(X_test)

    # Calculate performance metrics
    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    results[name] = {"MAE": mae, "MSE": mse, "R2": r2}
    print(f"‚úÖ {name} - MAE: {mae:.4f}, MSE: {mse:.4f}, R¬≤: {r2:.4f}")

# Convert results to a DataFrame for easy comparison
import pandas as pd
results_df = pd.DataFrame(results).T
print("\nüîç Model Performance Comparison:\n", results_df)

## Save the Best Model

import joblib
import os

# Get the best model based on R¬≤
best_model_name = results_df["R2"].idxmax()
best_model = models[best_model_name]

# Save the model in .pkl format
MODEL_DIR = "../models/"
os.makedirs(MODEL_DIR, exist_ok=True)
model_path = os.path.join(MODEL_DIR, "xgboost_model.pkl")

joblib.dump(best_model, model_path)
print(f"‚úÖ Best model '{best_model_name}' saved at {model_path}!")

